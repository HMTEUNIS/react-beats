{"ast":null,"code":"var _jsxFileName = \"/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/src/components/TrackList.js\";\nimport React, { useContext, memo } from 'react';\nimport { Context } from '../hooks/useStore';\nimport { soundFiles } from '../constants/config';\nimport Track from './Track';\nimport { context } from 'tone';\n\nconst TrackList = ({\n  currentStepID,\n  selected,\n  fetched\n}) => {\n  const _useContext = useContext(Context),\n        _useContext$sequence = _useContext.sequence,\n        trackList = _useContext$sequence.trackList,\n        noteCount = _useContext$sequence.noteCount;\n\n  console.log('selected', selected);\n  const toSave = trackList.map(track => {\n    const soundSave = {\n      name: track.soundFile,\n      notes: track.onNotes\n    };\n    return soundSave;\n  });\n\n  function saveIt(e) {\n    const track0 = toSave[0].title;\n    let newBeat = {\n      [toSave[0].name]: toSave[0].notes,\n      [toSave[1].name]: toSave[1].notes,\n      [toSave[2].name]: toSave[2].notes,\n      [toSave[3].name]: toSave[3].notes\n    };\n    fetch('http://localhost:4000/beats', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newBeat)\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  } // use an if statement to say that if selected > 0 onNotes is the array in the id'd array\n\n\n  const content = trackList.map((track, trackID) => {\n    let title = track.title,\n        onNotes = track.onNotes,\n        soundFile = track.soundFile;\n    const soundFilePath = soundFiles[soundFile];\n    console.log(trackID);\n\n    if (selected > 0) {\n      onNotes = [0, 1, 2];\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(Track, {\n      key: title,\n      trackID: +trackID,\n      currentStepID: currentStepID,\n      title: title,\n      noteCount: noteCount,\n      onNotes: onNotes,\n      soundFilePath: soundFilePath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"track-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, content), React.createElement(\"button\", {\n    onClick: e => saveIt(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \" SAVE BEAT \"));\n};\n\nexport default memo(TrackList);","map":{"version":3,"sources":["/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/src/components/TrackList.js"],"names":["React","useContext","memo","Context","soundFiles","Track","context","TrackList","currentStepID","selected","fetched","sequence","trackList","noteCount","console","log","toSave","map","track","soundSave","name","soundFile","notes","onNotes","saveIt","e","track0","title","newBeat","fetch","method","headers","body","JSON","stringify","then","res","json","data","catch","error","content","trackID","soundFilePath"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,QAAwC,OAAxC;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,OAAT,QAAwB,MAAxB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA;AAA3B,CAAD,KAA0C;AAAA,sBACTT,UAAU,CAACE,OAAD,CADD;AAAA,2CAChDQ,QADgD;AAAA,QACpCC,SADoC,wBACpCA,SADoC;AAAA,QACzBC,SADyB,wBACzBA,SADyB;;AAIxDC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBN,QAAxB;AACA,QAAMO,MAAM,GAAGJ,SAAS,CAACK,GAAV,CAAeC,KAAK,IAAI;AAEnC,UAAMC,SAAS,GAAG;AACdC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SADC;AAEdC,MAAAA,KAAK,EAAEJ,KAAK,CAACK;AAFC,KAAlB;AAIJ,WAAUJ,SAAV;AACC,GAPc,CAAf;;AAQA,WAASK,MAAT,CAAiBC,CAAjB,EAAoB;AACZ,UAAMC,MAAM,GAAGV,MAAM,CAAC,CAAD,CAAN,CAAUW,KAAzB;AAGJ,QAAIC,OAAO,GAAG;AACX,OAACZ,MAAM,CAAC,CAAD,CAAN,CAAUI,IAAX,GAAkBJ,MAAM,CAAC,CAAD,CAAN,CAAUM,KADjB;AAEX,OAACN,MAAM,CAAC,CAAD,CAAN,CAAUI,IAAX,GAAkBJ,MAAM,CAAC,CAAD,CAAN,CAAUM,KAFjB;AAGX,OAACN,MAAM,CAAC,CAAD,CAAN,CAAUI,IAAX,GAAkBJ,MAAM,CAAC,CAAD,CAAN,CAAUM,KAHjB;AAIX,OAACN,MAAM,CAAC,CAAD,CAAN,CAAUI,IAAX,GAAkBJ,MAAM,CAAC,CAAD,CAAN,CAAUM;AAJjB,KAAd;AAOAO,IAAAA,KAAK,CAAC,6BAAD,EAAgC;AACjCC,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFwB;AAKjCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf;AAL2B,KAAhC,CAAL,CAOGO,IAPH,CAOQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPf,EAQGF,IARH,CAQQG,IAAI,IAAI;AACZxB,MAAAA,OAAO,CAACC,GAAR,CAAYuB,IAAZ;AACD,KAVH,EAWGC,KAXH,CAWUC,KAAD,IAAW;AAChB1B,MAAAA,OAAO,CAAC0B,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACD,KAbH;AAcH,GAtCuD,CAuC5D;;;AAGI,QAAMC,OAAO,GAAG7B,SAAS,CAACK,GAAV,CAAc,CAACC,KAAD,EAAQwB,OAAR,KAAoB;AAAA,QACxCf,KADwC,GACVT,KADU,CACxCS,KADwC;AAAA,QACjCJ,OADiC,GACVL,KADU,CACjCK,OADiC;AAAA,QACxBF,SADwB,GACVH,KADU,CACxBG,SADwB;AAE9C,UAAMsB,aAAa,GAAGvC,UAAU,CAACiB,SAAD,CAAhC;AAEAP,IAAAA,OAAO,CAACC,GAAR,CAAY2B,OAAZ;;AACI,QAAIjC,QAAQ,GAAG,CAAf,EAAkB;AAACc,MAAAA,OAAO,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAV;AAAkB;;AAMzC,WACC,0CAEG,oBAAC,KAAD;AAEI,MAAA,GAAG,EAAEI,KAFT;AAGI,MAAA,OAAO,EAAE,CAACe,OAHd;AAII,MAAA,aAAa,EAAElC,aAJnB;AAKI,MAAA,KAAK,EAAEmB,KALX;AAMI,MAAA,SAAS,EAAEd,SANf;AAOI,MAAA,OAAO,EAAEU,OAPb;AAQI,MAAA,aAAa,EAAEoB,aARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFH,CADD;AAkBH,GA7Be,CAAhB;AAiCA,SACI,0CAGA;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,OADL,CAHA,EAOA;AAAQ,IAAA,OAAO,EAAGhB,CAAD,IAAOD,MAAM,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAPA,CADJ;AAYH,CAvFD;;AAyFA,eAAetB,IAAI,CAACK,SAAD,CAAnB","sourcesContent":["import React, { useContext, memo } from 'react'\nimport { Context } from '../hooks/useStore'\nimport { soundFiles } from '../constants/config'\nimport Track from './Track'\nimport { context } from 'tone'\n\nconst TrackList = ({ currentStepID, selected, fetched }) => {\n    const { sequence: { trackList, noteCount } } = useContext(Context)\n\n\n    console.log('selected', selected)\n    const toSave = trackList.map( track => {\n        \n        const soundSave = {\n            name : track.soundFile,\n            notes: track.onNotes\n        } \n    return    soundSave\n    })\n    function saveIt (e) {\n            const track0 = toSave[0].title\n             \n\n        let newBeat = {\n           [toSave[0].name]: toSave[0].notes,\n           [toSave[1].name]: toSave[1].notes,\n           [toSave[2].name]: toSave[2].notes,\n           [toSave[3].name]: toSave[3].notes\n\n        }\n        fetch('http://localhost:4000/beats', {\n            method: 'POST', \n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newBeat),\n          })\n          .then(res => res.json())\n          .then(data => {\n            console.log(data);\n          })\n          .catch((error) => {\n            console.error('Error:', error);\n          });\n    }\n// use an if statement to say that if selected > 0 onNotes is the array in the id'd array\n       \n\n    const content = trackList.map((track, trackID) => {\n        let { title, onNotes, soundFile } = track\n        const soundFilePath = soundFiles[soundFile]\n\n        console.log(trackID)\n            if (selected > 0) {onNotes = [0,1,2]}\n            \n\n        \n    \n       \n        return (\n         <>\n         \n            <Track\n            \n                key={title}\n                trackID={+trackID}\n                currentStepID={currentStepID}\n                title={title}\n                noteCount={noteCount}\n                onNotes={onNotes}\n                soundFilePath={soundFilePath}\n            />\n            \n           \n            \n            </>\n        )\n    })\n    \n     \n\n    return (\n        <>\n        \n      \n        <div className=\"track-list\">\n            {content}\n            \n        </div>\n        <button onClick={(e) => saveIt()} > SAVE BEAT </ button>\n        \n        </>\n    )\n}\n\nexport default memo(TrackList)\n\n"]},"metadata":{},"sourceType":"module"}