{"ast":null,"code":"class Sound {\n  constructor(path) {\n    const isSafari = !!navigator.userAgent.match(/safari/i) && !navigator.userAgent.match(/chrome/i) && typeof document.body.style.webkitFilter !== \"undefined\";\n    const AudioContext = window.AudioContext || window.webkitAudioContext || window.MozAudioContext;\n    this.audioContext = new AudioContext();\n\n    if (isSafari) {\n      this.isSafariFixed = false;\n      this.boundSafariFix = this.safariFix.bind(this);\n      window.addEventListener('click', this.boundSafariFix, false);\n    }\n\n    if (!this.buffer) this.loadSound(path);\n  }\n\n  safariFix() {\n    if (this.isSafariFixed) {\n      window.removeEventListener('click', this.boundSafariFix, false);\n      return;\n    } // create empty buffer, connect to speakers and play the file\n\n\n    var buffer = this.audioContext.createBuffer(1, 1, 22050);\n    var source = this.audioContext.createBufferSource();\n    source.buffer = buffer;\n    source.connect(this.audioContext.destination);\n    source.start(0);\n    this.isSafariFixed = true;\n  }\n\n  async loadSound(path) {\n    this.recorderNode = this.audioContext.createGain();\n    this.recorderNode.gain.value = 1;\n    this.buffer = null;\n    this.path = path;\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    const audioBuffer = await this.decodeAudioDataAsync(this.audioContext, arrayBuffer);\n    this.buffer = audioBuffer;\n  }\n\n  decodeAudioDataAsync(audioContext, arrayBuffer) {\n    return new Promise((resolve, reject) => {\n      audioContext.decodeAudioData(arrayBuffer, buffer => resolve(buffer), e => reject(e));\n    });\n  }\n\n  play(gainValue = 1, rateValue = 1) {\n    this.audioContext.resume();\n    const gain = this.audioContext.createGain();\n    const sound = this.audioContext.createBufferSource();\n    gain.gain.value = gainValue;\n    sound.playbackRate.value = rateValue;\n    sound.buffer = this.buffer;\n    sound.connect(gain);\n    gain.connect(this.recorderNode);\n    gain.connect(this.audioContext.destination);\n    sound.start(0);\n  }\n\n}\n\nexport default Sound;","map":{"version":3,"sources":["/home/webster/Development/code/Mod2/react-beats/src/utils/Sound.js"],"names":["Sound","constructor","path","isSafari","navigator","userAgent","match","document","body","style","webkitFilter","AudioContext","window","webkitAudioContext","MozAudioContext","audioContext","isSafariFixed","boundSafariFix","safariFix","bind","addEventListener","buffer","loadSound","removeEventListener","createBuffer","source","createBufferSource","connect","destination","start","recorderNode","createGain","gain","value","response","fetch","arrayBuffer","audioBuffer","decodeAudioDataAsync","Promise","resolve","reject","decodeAudioData","e","play","gainValue","rateValue","resume","sound","playbackRate"],"mappings":"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","sourcesContent":["class Sound {\n\n    constructor(path) {\n        const isSafari = !!navigator.userAgent.match(/safari/i) && !navigator.userAgent.match(/chrome/i) && typeof document.body.style.webkitFilter !== \"undefined\"\n        const AudioContext = window.AudioContext || window.webkitAudioContext || window.MozAudioContext\n        this.audioContext = new AudioContext()\n        if (isSafari) {\n            this.isSafariFixed = false\n            this.boundSafariFix = this.safariFix.bind(this)\n            window.addEventListener('click', this.boundSafariFix, false)\n        }\n        if (!this.buffer) this.loadSound(path)\n    }\n\n    safariFix() {\n        if (this.isSafariFixed) {\n            window.removeEventListener('click', this.boundSafariFix, false)\n            return\n        }\n        // create empty buffer, connect to speakers and play the file\n        var buffer = this.audioContext.createBuffer(1, 1, 22050)\n        var source = this.audioContext.createBufferSource()\n        source.buffer = buffer\n        source.connect(this.audioContext.destination)\n        source.start(0)\n        this.isSafariFixed = true\n    }\n\n    async loadSound(path) {\n        this.recorderNode = this.audioContext.createGain()\n        this.recorderNode.gain.value = 1\n        this.buffer = null\n        this.path = path\n        const response = await fetch(path)\n        const arrayBuffer = await response.arrayBuffer()\n        const audioBuffer = await this.decodeAudioDataAsync(\n            this.audioContext, arrayBuffer\n        )\n        this.buffer = audioBuffer\n    }\n\n    decodeAudioDataAsync(audioContext, arrayBuffer) {\n        return new Promise((resolve, reject) => {\n            audioContext.decodeAudioData(\n                arrayBuffer,\n                buffer => resolve(buffer),\n                e => reject(e)\n            )\n        })\n    }\n\n    play(gainValue = 1, rateValue = 1) {\n        this.audioContext.resume()\n        const gain = this.audioContext.createGain()\n        const sound = this.audioContext.createBufferSource()\n        gain.gain.value = gainValue\n        sound.playbackRate.value = rateValue\n        sound.buffer = this.buffer\n        sound.connect(gain)\n        gain.connect(this.recorderNode)\n        gain.connect(this.audioContext.destination)\n        sound.start(0)\n    }\n}\n\nexport default Sound\n"]},"metadata":{},"sourceType":"module"}