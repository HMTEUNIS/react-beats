{"ast":null,"code":"import _slicedToArray from \"/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/src/components/TrackList.js\";\nimport React, { useContext, memo, useState } from 'react';\nimport { Context } from '../hooks/useStore';\nimport { soundFiles } from '../constants/config';\nimport Track from './Track';\nimport { context } from 'tone';\n\nconst TrackList = ({\n  currentStepID,\n  selected,\n  fetched\n}) => {\n  const _useContext = useContext(Context),\n        _useContext$sequence = _useContext.sequence,\n        trackList = _useContext$sequence.trackList,\n        noteCount = _useContext$sequence.noteCount;\n\n  function swapBeat(e) {\n    let kickNotes = content[0].props.children.props.onNotes;\n    const newKickNotes = gettin.trackListInfo[0].notes;\n    kickNotes = newKickNotes;\n    console.log('kicknotes', kickNotes);\n  }\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        grab = _useState2[0],\n        setGrab = _useState2[1];\n\n  console.log('selected', selected);\n  const toSave = trackList.map(track => {\n    const soundSave = {\n      name: track.soundFile,\n      notes: track.onNotes\n    };\n    return soundSave;\n  });\n\n  function saveIt(e) {\n    let newBeat = {\n      trackListInfo: [{\n        \"name\": toSave[0].name,\n        \"notes\": toSave[0].notes\n      }, {\n        \"name\": toSave[1].name,\n        \"notes\": toSave[1].notes\n      }, {\n        \"name\": toSave[2].name,\n        \"notes\": toSave[3].notes\n      }, {\n        \"name\": toSave[3].name,\n        \"notes\": toSave[3].notes\n      }]\n    };\n    fetch('http://localhost:4000/beats', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newBeat)\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  } // use an if statement to say that if selected > 0 onNotes is the array in the id'd array\n\n\n  const gettin = fetched[selected - 1];\n  console.log('load', gettin.trackListInfo[0].notes);\n  let content = trackList.map((track, trackID) => {\n    let title = track.title,\n        onNotes = track.onNotes,\n        soundFile = track.soundFile;\n    let soundFilePath = soundFiles[soundFile];\n    return React.createElement(React.Fragment, null, React.createElement(Track, {\n      key: title,\n      trackID: +trackID,\n      currentStepID: currentStepID,\n      title: title,\n      noteCount: noteCount,\n      onNotes: onNotes,\n      soundFilePath: soundFilePath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(React.Fragment, null, console.log('runningKick', content[0].props.children.props.onNotes), React.createElement(\"div\", {\n    className: \"track-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, content), React.createElement(\"button\", {\n    onClick: e => saveIt(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \" SAVE BEAT \"), React.createElement(\"button\", {\n    onClick: e => swapBeat(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Load Beat \"));\n};\n\nexport default memo(TrackList);","map":{"version":3,"sources":["/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/src/components/TrackList.js"],"names":["React","useContext","memo","useState","Context","soundFiles","Track","context","TrackList","currentStepID","selected","fetched","sequence","trackList","noteCount","swapBeat","e","kickNotes","content","props","children","onNotes","newKickNotes","gettin","trackListInfo","notes","console","log","grab","setGrab","toSave","map","track","soundSave","name","soundFile","saveIt","newBeat","fetch","method","headers","body","JSON","stringify","then","res","json","data","catch","error","trackID","title","soundFilePath"],"mappings":"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","sourcesContent":["import React, { useContext, memo, useState } from 'react'\nimport { Context } from '../hooks/useStore'\nimport { soundFiles } from '../constants/config'\nimport Track from './Track'\nimport { context } from 'tone'\n\nconst TrackList = ({ currentStepID, selected, fetched }) => {\n    const { sequence: { trackList, noteCount } } = useContext(Context)\n    function swapBeat (e) {\n        \n        let kickNotes = content[0].props.children.props.onNotes\n        const newKickNotes = gettin.trackListInfo[0].notes\n        kickNotes = newKickNotes\n            console.log('kicknotes', kickNotes)\n        }\n\n    const [grab, setGrab] = useState ([])\n\n    console.log('selected', selected)\n    const toSave = trackList.map( track => {\n        \n        const soundSave = {\n            name : track.soundFile,\n            notes: track.onNotes\n        } \n    return    soundSave\n    })\n    function saveIt (e) {\n          \n             \n\n        let newBeat ={ \n        trackListInfo : [\n            {\n                \"name\": toSave[0].name,\n                \"notes\": toSave[0].notes\n            },\n            {\n                \"name\": toSave[1].name,\n                \"notes\": toSave[1].notes\n            },\n            {\n                \"name\": toSave[2].name,\n                \"notes\": toSave[3].notes\n            },\n            {\n                \"name\": toSave[3].name,\n                \"notes\": toSave[3].notes\n            }\n           \n        ]  }\n\n        fetch('http://localhost:4000/beats', {\n            method: 'POST', \n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newBeat),\n          })\n          .then(res => res.json())\n          .then(data => {\n            console.log(data);\n          })\n          .catch((error) => {\n            console.error('Error:', error);\n          });\n    }\n// use an if statement to say that if selected > 0 onNotes is the array in the id'd array\n       const gettin = fetched[selected-1]\n       console.log('load', gettin.trackListInfo[0].notes)\n    let content = trackList.map((track, trackID) => {\n        let { title, onNotes, soundFile } = track\n        let soundFilePath = soundFiles[soundFile]\n        \n\n\n        return (\n         <>\n         \n            <Track\n            \n            \n                key={title}\n                trackID={+trackID}\n                currentStepID={currentStepID}\n                title={title}\n                noteCount={noteCount}\n                onNotes={onNotes}\n                soundFilePath={soundFilePath}\n            />\n            </>\n        )\n    })\n    \n   \n        \n    return (\n        <>\n        \n        {console.log('runningKick', content[0].props.children.props.onNotes)}\n\n        <div className=\"track-list\">\n        \n            {content}\n        </div>\n        <button onClick={(e) => saveIt()} > SAVE BEAT </ button>\n        <button onClick={(e) => swapBeat()} >Load Beat </button>\n        \n        </>\n    )\n}\n\nexport default memo(TrackList)\n\n"]},"metadata":{},"sourceType":"module"}