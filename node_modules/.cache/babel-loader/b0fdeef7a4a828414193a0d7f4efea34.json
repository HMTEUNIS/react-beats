{"ast":null,"code":"import _slicedToArray from \"/home/webster/Development/code/Mod2/react-beats/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/webster/Development/code/Mod2/react-beats/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/webster/Development/code/Mod2/react-beats/src/hooks/useStore.js\";\nimport React, { useReducer, createContext } from 'react';\nimport { sequenceList } from '../constants/config';\nconst Context = createContext({\n  sequence: {},\n  toggleNote: () => {},\n  selectSequence: () => {}\n});\n\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_SEQUENCE':\n      return _objectSpread({}, sequenceList.find(seq => seq.id === action.value));\n\n    case 'SET_ON_NOTES':\n      let newTrackList = state.trackList.map((track, trackID) => {\n        if (action.trackID === trackID) {\n          return _objectSpread({}, track, {\n            onNotes: action.value\n          });\n        } else {\n          return track;\n        }\n      });\n      return _objectSpread({}, state, {\n        trackList: newTrackList\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst Provider = ({\n  children\n}) => {\n  const _useReducer = useReducer(appReducer, _objectSpread({}, sequenceList[0])),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        sequence = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const toggleNote = ({\n    trackID,\n    stepID\n  }) => {\n    let newOnNotes;\n    const onNotes = sequence.trackList[trackID].onNotes;\n\n    if (onNotes.indexOf(stepID) === -1) {\n      newOnNotes = [...onNotes, stepID];\n    } else {\n      newOnNotes = onNotes.filter(col => col !== stepID);\n    }\n\n    dispatch({\n      type: 'SET_ON_NOTES',\n      value: newOnNotes,\n      trackID\n    });\n  };\n\n  const selectSequence = sequenceID => {\n    dispatch({\n      type: 'SET_SEQUENCE',\n      value: sequenceID\n    });\n  };\n\n  return React.createElement(Context.Provider, {\n    value: {\n      sequence,\n      toggleNote,\n      selectSequence\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, children);\n};\n\nexport { Provider, Context };","map":{"version":3,"sources":["/home/webster/Development/code/Mod2/react-beats/src/hooks/useStore.js"],"names":["React","useReducer","createContext","sequenceList","Context","sequence","toggleNote","selectSequence","appReducer","state","action","type","find","seq","id","value","newTrackList","trackList","map","track","trackID","onNotes","Provider","children","dispatch","stepID","newOnNotes","indexOf","filter","col","sequenceID"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,QAAiD,OAAjD;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,MAAMC,OAAO,GAAGF,aAAa,CAAC;AAC1BG,EAAAA,QAAQ,EAAE,EADgB;AAE1BC,EAAAA,UAAU,EAAE,MAAM,CAAG,CAFK;AAG1BC,EAAAA,cAAc,EAAE,MAAM,CAAG;AAHC,CAAD,CAA7B;;AAMA,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACI,+BACOR,YAAY,CAACS,IAAb,CAAkBC,GAAG,IAAIA,GAAG,CAACC,EAAJ,KAAWJ,MAAM,CAACK,KAA3C,CADP;;AAGJ,SAAK,cAAL;AACI,UAAIC,YAAY,GAAGP,KAAK,CAACQ,SAAN,CAAgBC,GAAhB,CAAoB,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACvD,YAAIV,MAAM,CAACU,OAAP,KAAmBA,OAAvB,EAAgC;AAC5B,mCACOD,KADP;AAEIE,YAAAA,OAAO,EAAEX,MAAM,CAACK;AAFpB;AAIH,SALD,MAKO;AACH,iBAAOI,KAAP;AACH;AACJ,OATkB,CAAnB;AAUA,+BACOV,KADP;AAEIQ,QAAAA,SAAS,EAAED;AAFf;;AAIJ;AACI,aAAOP,KAAP;AArBR;AAuBH,CAxBD;;AA0BA,MAAMa,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA,sBACFtB,UAAU,CAACO,UAAD,oBAAkBL,YAAY,CAAC,CAAD,CAA9B,EADR;AAAA;AAAA,QACxBE,QADwB;AAAA,QACdmB,QADc;;AAG/B,QAAMlB,UAAU,GAAG,CAAC;AAAEc,IAAAA,OAAF;AAAWK,IAAAA;AAAX,GAAD,KAAyB;AACxC,QAAIC,UAAJ;AACA,UAAML,OAAO,GAAGhB,QAAQ,CAACY,SAAT,CAAmBG,OAAnB,EAA4BC,OAA5C;;AAEA,QAAIA,OAAO,CAACM,OAAR,CAAgBF,MAAhB,MAA4B,CAAC,CAAjC,EAAoC;AAChCC,MAAAA,UAAU,GAAG,CAAC,GAAGL,OAAJ,EAAaI,MAAb,CAAb;AACH,KAFD,MAEO;AACHC,MAAAA,UAAU,GAAGL,OAAO,CAACO,MAAR,CAAeC,GAAG,IAAIA,GAAG,KAAKJ,MAA9B,CAAb;AACH;;AAGDD,IAAAA,QAAQ,CAAC;AACLb,MAAAA,IAAI,EAAE,cADD;AAELI,MAAAA,KAAK,EAAEW,UAFF;AAGLN,MAAAA;AAHK,KAAD,CAAR;AAMH,GAjBD;;AAoBA,QAAMb,cAAc,GAAIuB,UAAD,IAAgB;AACnCN,IAAAA,QAAQ,CAAC;AACLb,MAAAA,IAAI,EAAE,cADD;AAELI,MAAAA,KAAK,EAAEe;AAFF,KAAD,CAAR;AAIH,GALD;;AAOA,SACI,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AAAEzB,MAAAA,QAAF;AAAYC,MAAAA,UAAZ;AAAwBC,MAAAA;AAAxB,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKgB,QADL,CADJ;AAKH,CAnCD;;AAqCA,SACID,QADJ,EAEIlB,OAFJ","sourcesContent":["import React, { useReducer, createContext } from 'react'\nimport { sequenceList } from '../constants/config'\n\nconst Context = createContext({\n    sequence: {},\n    toggleNote: () => { },\n    selectSequence: () => { },\n})\n\nconst appReducer = (state, action) => {\n    switch (action.type) {\n        case 'SET_SEQUENCE':\n            return {\n                ...sequenceList.find(seq => seq.id === action.value)\n            }\n        case 'SET_ON_NOTES':\n            let newTrackList = state.trackList.map((track, trackID) => {\n                if (action.trackID === trackID) {\n                    return {\n                        ...track,\n                        onNotes: action.value\n                    }\n                } else {\n                    return track\n                }\n            })\n            return {\n                ...state,\n                trackList: newTrackList\n            }\n        default:\n            return state\n    }\n}\n\nconst Provider = ({ children }) => {\n    const [sequence, dispatch] = useReducer(appReducer, { ...sequenceList[0] })\n\n    const toggleNote = ({ trackID, stepID }) => {\n        let newOnNotes\n        const onNotes = sequence.trackList[trackID].onNotes\n\n        if (onNotes.indexOf(stepID) === -1) {\n            newOnNotes = [...onNotes, stepID]\n        } else {\n            newOnNotes = onNotes.filter(col => col !== stepID)\n        }\n       \n\n        dispatch({\n            type: 'SET_ON_NOTES',\n            value: newOnNotes,\n            trackID,\n\n        })\n    }\n    \n\n    const selectSequence = (sequenceID) => {\n        dispatch({\n            type: 'SET_SEQUENCE',\n            value: sequenceID,\n        })\n    }\n\n    return (\n        <Context.Provider value={{ sequence, toggleNote, selectSequence }}>\n            {children}\n        </Context.Provider>\n    )\n}\n\nexport {\n    Provider,\n    Context,\n    \n}\n"]},"metadata":{},"sourceType":"module"}