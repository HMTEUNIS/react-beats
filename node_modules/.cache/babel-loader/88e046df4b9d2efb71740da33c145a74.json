{"ast":null,"code":"import { assert } from \"../core/util/Debug\";\nimport { clamp } from \"../core/util/Math\";\n/**\n * Start at the first value and go up to the last\n */\n\nfunction* upPatternGen(values) {\n  let index = 0;\n\n  while (index < values.length) {\n    index = clampToArraySize(index, values);\n    yield values[index];\n    index++;\n  }\n}\n/**\n * Start at the last value and go down to 0\n */\n\n\nfunction* downPatternGen(values) {\n  let index = values.length - 1;\n\n  while (index >= 0) {\n    index = clampToArraySize(index, values);\n    yield values[index];\n    index--;\n  }\n}\n/**\n * Infinitely yield the generator\n */\n\n\nfunction* infiniteGen(values, gen) {\n  while (true) {\n    yield* gen(values);\n  }\n}\n/**\n * Make sure that the index is in the given range\n */\n\n\nfunction clampToArraySize(index, values) {\n  return clamp(index, 0, values.length - 1);\n}\n/**\n * Alternate between two generators\n */\n\n\nfunction* alternatingGenerator(values, directionUp) {\n  let index = directionUp ? 0 : values.length - 1;\n\n  while (true) {\n    index = clampToArraySize(index, values);\n    yield values[index];\n\n    if (directionUp) {\n      index++;\n\n      if (index >= values.length - 1) {\n        directionUp = false;\n      }\n    } else {\n      index--;\n\n      if (index <= 0) {\n        directionUp = true;\n      }\n    }\n  }\n}\n/**\n * Starting from the bottom move up 2, down 1\n */\n\n\nfunction* jumpUp(values) {\n  let index = 0;\n  let stepIndex = 0;\n\n  while (index < values.length) {\n    index = clampToArraySize(index, values);\n    yield values[index];\n    stepIndex++;\n    index += stepIndex % 2 ? 2 : -1;\n  }\n}\n/**\n * Starting from the top move down 2, up 1\n */\n\n\nfunction* jumpDown(values) {\n  let index = values.length - 1;\n  let stepIndex = 0;\n\n  while (index >= 0) {\n    index = clampToArraySize(index, values);\n    yield values[index];\n    stepIndex++;\n    index += stepIndex % 2 ? -2 : 1;\n  }\n}\n/**\n * Choose a random index each time\n */\n\n\nfunction* randomGen(values) {\n  while (true) {\n    const randomIndex = Math.floor(Math.random() * values.length);\n    yield values[randomIndex];\n  }\n}\n/**\n * Randomly go through all of the values once before choosing a new random order\n */\n\n\nfunction* randomOnce(values) {\n  // create an array of indices\n  const copy = [];\n\n  for (let i = 0; i < values.length; i++) {\n    copy.push(i);\n  }\n\n  while (copy.length > 0) {\n    // random choose an index, and then remove it so it's not chosen again\n    const randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n    const index = clampToArraySize(randVal[0], values);\n    yield values[index];\n  }\n}\n/**\n * Randomly choose to walk up or down 1 index in the values array\n */\n\n\nfunction* randomWalk(values) {\n  // randomly choose a starting index in the values array\n  let index = Math.floor(Math.random() * values.length);\n\n  while (true) {\n    if (index === 0) {\n      index++; // at bottom of array, so force upward step\n    } else if (index === values.length - 1) {\n      index--; // at top of array, so force downward step\n    } else if (Math.random() < 0.5) {\n      // else choose random downward or upward step\n      index--;\n    } else {\n      index++;\n    }\n\n    yield values[index];\n  }\n}\n/**\n * PatternGenerator returns a generator which will iterate over the given array\n * of values and yield the items according to the passed in pattern\n * @param values An array of values to iterate over\n * @param pattern The name of the pattern use when iterating over\n * @param index Where to start in the offset of the values array\n */\n\n\nexport function* PatternGenerator(values, pattern = \"up\", index = 0) {\n  // safeguards\n  assert(values.length > 0, \"The array must have more than one value in it\");\n\n  switch (pattern) {\n    case \"up\":\n      yield* infiniteGen(values, upPatternGen);\n\n    case \"down\":\n      yield* infiniteGen(values, downPatternGen);\n\n    case \"upDown\":\n      yield* alternatingGenerator(values, true);\n\n    case \"downUp\":\n      yield* alternatingGenerator(values, false);\n\n    case \"alternateUp\":\n      yield* infiniteGen(values, jumpUp);\n\n    case \"alternateDown\":\n      yield* infiniteGen(values, jumpDown);\n\n    case \"random\":\n      yield* randomGen(values);\n\n    case \"randomOnce\":\n      yield* infiniteGen(values, randomOnce);\n\n    case \"randomWalk\":\n      yield* randomWalk(values);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}