{"ast":null,"code":"import _slicedToArray from \"/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/src/components/TrackList.js\";\nimport React, { useContext, memo, useState } from 'react';\nimport { Context } from '../hooks/useStore';\nimport { soundFiles } from '../constants/config';\nimport Track from './Track';\nimport { context } from 'tone';\n\nconst TrackList = ({\n  currentStepID,\n  selected,\n  fetched\n}) => {\n  const _useContext = useContext(Context),\n        _useContext$sequence = _useContext.sequence,\n        trackList = _useContext$sequence.trackList,\n        noteCount = _useContext$sequence.noteCount;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        notes = _useState2[0],\n        setNotes = _useState2[1]; // use an if statement to say that if selected > 0 onNotes is the array in the id'd array\n\n\n  const gettin = fetched[selected];\n  let loadedNotes = gettin.trackListInfo;\n  let loadKicks = gettin.trackListInfo[0].notes;\n  let loadSnares = gettin.trackListInfo[1].notes;\n  let loadHho = gettin.trackListInfo[2].notes;\n  let loadHhc = gettin.trackListInfo[3].notes;\n  trackList[0].onNotes = loadKicks;\n  trackList[1].onNotes = loadSnares;\n  trackList[2].onNotes = loadHho;\n  trackList[3].onNotes = loadHhc;\n  let content = trackList.map((track, trackID) => {\n    let key = trackID;\n    let title = track.title,\n        onNotes = track.onNotes,\n        soundFile = track.soundFile,\n        id = track.id;\n    let soundFilePath = soundFiles[soundFile];\n    return React.createElement(React.Fragment, null, React.createElement(Track, {\n      id: id,\n      key: title,\n      trackID: +trackID,\n      currentStepID: currentStepID,\n      title: title,\n      noteCount: noteCount,\n      onNotes: onNotes,\n      soundFilePath: soundFilePath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }));\n  });\n  console.log('selected', selected);\n  let toSave = trackList.map(track => {\n    const soundSave = {\n      name: track.soundFile,\n      notes: track.onNotes\n    };\n    return soundSave;\n  });\n\n  function saveIt(e) {\n    let newBeat = {\n      trackListInfo: [{\n        \"name\": toSave[0].name,\n        \"notes\": toSave[0].notes\n      }, {\n        \"name\": toSave[1].name,\n        \"notes\": toSave[1].notes\n      }, {\n        \"name\": toSave[2].name,\n        \"notes\": toSave[2].notes\n      }, {\n        \"name\": toSave[3].name,\n        \"notes\": toSave[3].notes\n      }]\n    };\n    fetch('http://localhost:4000/beats', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newBeat)\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"track-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, content), React.createElement(\"button\", {\n    onClick: e => saveIt(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \" SAVE BEAT \"), React.createElement(\"button\", {\n    onClick: e => console.log('fuck'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \" LOAD BEAT \"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Beat1 is the reset!\"));\n};\n\nexport default memo(TrackList);","map":{"version":3,"sources":["/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/src/components/TrackList.js"],"names":["React","useContext","memo","useState","Context","soundFiles","Track","context","TrackList","currentStepID","selected","fetched","sequence","trackList","noteCount","notes","setNotes","gettin","loadedNotes","trackListInfo","loadKicks","loadSnares","loadHho","loadHhc","onNotes","content","map","track","trackID","key","title","soundFile","id","soundFilePath","console","log","toSave","soundSave","name","saveIt","e","newBeat","fetch","method","headers","body","JSON","stringify","then","res","json","data","catch","error"],"mappings":"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","sourcesContent":["import React, { useContext, memo, useState } from 'react'\nimport { Context } from '../hooks/useStore'\nimport { soundFiles } from '../constants/config'\nimport Track from './Track'\nimport { context } from 'tone'\n\nconst TrackList = ({ currentStepID, selected, fetched }) => {\n    const { sequence: { trackList, noteCount } } = useContext(Context)\n  \n\n    const [notes, setNotes] = useState ([])\n\n    \n// use an if statement to say that if selected > 0 onNotes is the array in the id'd array\nconst gettin = fetched[selected]\n\nlet loadedNotes = gettin.trackListInfo\nlet loadKicks = gettin.trackListInfo[0].notes\nlet loadSnares = gettin.trackListInfo[1].notes\nlet loadHho = gettin.trackListInfo[2].notes\nlet loadHhc = gettin.trackListInfo[3].notes\n\n       trackList[0].onNotes = loadKicks\n       trackList[1].onNotes = loadSnares\n       trackList[2].onNotes = loadHho\n       trackList[3].onNotes = loadHhc\n\n    let content = trackList.map((track, trackID) => {\n        let key = trackID\n        let { title, onNotes, soundFile, id } = track\n        let soundFilePath = soundFiles[soundFile]\n        return (\n         <> \n\n            <Track\n            \n                id = {id}\n                key={title}\n                trackID={+trackID}\n                currentStepID={currentStepID}\n                title={title}\n                noteCount={noteCount}\n                onNotes={onNotes}\n                soundFilePath={soundFilePath}\n            />\n            </>\n        )\n    })\n    console.log('selected', selected)\n    let toSave = trackList.map( track => {\n        \n        const soundSave = {\n            name : track.soundFile,\n            notes: track.onNotes\n        } \n    return    soundSave\n    })\n    function saveIt (e) {\n          \n             \n\n        let newBeat ={ \n        trackListInfo : [\n            {\n                \"name\": toSave[0].name,\n                \"notes\": toSave[0].notes\n            },\n            {\n                \"name\": toSave[1].name,\n                \"notes\": toSave[1].notes\n            },\n            {\n                \"name\": toSave[2].name,\n                \"notes\": toSave[2].notes\n            },\n            {\n                \"name\": toSave[3].name,\n                \"notes\": toSave[3].notes\n            }\n           \n        ]  }\n\n        fetch('http://localhost:4000/beats', {\n            method: 'POST', \n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newBeat),\n          })\n          .then(res => res.json())\n          .then(data => {\n            console.log(data);\n          })\n          .catch((error) => {\n            console.error('Error:', error);\n          });\n    }\n    return (\n        <>\n        \n\n        <div className=\"track-list\">\n        \n            {content}\n        </div>\n        <button onClick={(e) => saveIt()} > SAVE BEAT </ button>\n        <button onClick={(e) => console.log('fuck')} > LOAD BEAT </ button>\n        <p>Beat1 is the reset!</p>\n        </>\n    )\n}\n\nexport default memo(TrackList)\n\n"]},"metadata":{},"sourceType":"module"}