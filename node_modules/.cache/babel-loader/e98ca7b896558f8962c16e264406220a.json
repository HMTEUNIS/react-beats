{"ast":null,"code":"var _jsxFileName = \"/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/src/components/PlayHead.js\";\nimport React, { useRef, useLayoutEffect, memo } from 'react';\nimport './PlayHead.css';\n\nconst PlayHead = ({\n  notesAreaWidthInPixels,\n  timePerSequence,\n  totalLapsedTime\n}) => {\n  const PlayHead = useRef(null);\n  useLayoutEffect(() => {\n    let progress = Math.min(totalLapsedTime % timePerSequence / timePerSequence, 1);\n    PlayHead.current.style.transform = 'translate3d(' + (progress * notesAreaWidthInPixels).toFixed(2) + 'px, 0, 0px)';\n  }, [notesAreaWidthInPixels, timePerSequence, totalLapsedTime]);\n  return React.createElement(\"div\", {\n    className: \"play_head\",\n    ref: PlayHead,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  });\n};\n\nexport default memo(PlayHead);","map":{"version":3,"sources":["/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/src/components/PlayHead.js"],"names":["React","useRef","useLayoutEffect","memo","PlayHead","notesAreaWidthInPixels","timePerSequence","totalLapsedTime","progress","Math","min","current","style","transform","toFixed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,eAAxB,EAAyCC,IAAzC,QAAqD,OAArD;AACA,OAAO,gBAAP;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AACdC,EAAAA,sBADc;AAEdC,EAAAA,eAFc;AAGdC,EAAAA;AAHc,CAAD,KAIX;AACF,QAAMH,QAAQ,GAAGH,MAAM,CAAC,IAAD,CAAvB;AAEAC,EAAAA,eAAe,CAAC,MAAM;AAClB,QAAIM,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAUH,eAAe,GAAGD,eAAnB,GAAsCA,eAA/C,EAAgE,CAAhE,CAAf;AAEAF,IAAAA,QAAQ,CAACO,OAAT,CAAiBC,KAAjB,CAAuBC,SAAvB,GAAmC,iBAAiB,CAACL,QAAQ,GAAGH,sBAAZ,EAAoCS,OAApC,CAA4C,CAA5C,CAAjB,GAAkE,aAArG;AACH,GAJc,EAIZ,CAACT,sBAAD,EAAyBC,eAAzB,EAA0CC,eAA1C,CAJY,CAAf;AAMA,SACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,GAAG,EAAEH,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CAhBD;;AAkBA,eAAeD,IAAI,CAACC,QAAD,CAAnB","sourcesContent":["import React, { useRef, useLayoutEffect, memo } from 'react'\nimport './PlayHead.css'\n\nconst PlayHead = ({\n    notesAreaWidthInPixels,\n    timePerSequence,\n    totalLapsedTime\n}) => {\n    const PlayHead = useRef(null)\n\n    useLayoutEffect(() => {\n        let progress = Math.min((totalLapsedTime % timePerSequence) / timePerSequence, 1)\n\n        PlayHead.current.style.transform = 'translate3d(' + (progress * notesAreaWidthInPixels).toFixed(2) + 'px, 0, 0px)'\n    }, [notesAreaWidthInPixels, timePerSequence, totalLapsedTime])\n\n    return (\n        <div className=\"play_head\" ref={PlayHead}></div>\n    )\n}\n\nexport default memo(PlayHead)\n"]},"metadata":{},"sourceType":"module"}