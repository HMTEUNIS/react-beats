{"ast":null,"code":"var _jsxFileName = \"/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/src/components/TrackList.js\";\nimport React, { useContext, memo } from 'react';\nimport { Context } from '../hooks/useStore';\nimport { soundFiles } from '../constants/config';\nimport Track from './Track';\nimport { context } from 'tone';\n\nconst TrackList = ({\n  currentStepID,\n  selected,\n  fetched\n}) => {\n  const _useContext = useContext(Context),\n        _useContext$sequence = _useContext.sequence,\n        trackList = _useContext$sequence.trackList,\n        noteCount = _useContext$sequence.noteCount;\n\n  console.log('selected', selected);\n  const toSave = trackList.map(track => {\n    const soundSave = {\n      name: track.soundFile,\n      notes: track.onNotes\n    };\n    return soundSave;\n  });\n\n  function saveIt(e) {\n    let newBeat = {\n      trackListInfo: [{\n        \"name\": toSave[0].name,\n        \"notes\": toSave[0].notes\n      }, {\n        \"name\": toSave[1].name,\n        \"notes\": toSave[1].notes\n      }, {\n        \"name\": toSave[2].name,\n        \"notes\": toSave[3].notes\n      }, {\n        \"name\": toSave[3].name,\n        \"notes\": toSave[3].notes\n      }]\n    };\n    fetch('http://localhost:4000/beats', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newBeat)\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  } // use an if statement to say that if selected > 0 onNotes is the array in the id'd array\n\n\n  const gettin = fetched[selected - 1];\n  const content = trackList.map((track, trackID) => {\n    let title = track.title,\n        onNotes = track.onNotes,\n        soundFile = track.soundFile;\n    const soundFilePath = soundFiles[soundFile];\n\n    if (selected === 0) {\n      return React.createElement(React.Fragment, null, React.createElement(Track, {\n        key: title,\n        trackID: +trackID,\n        currentStepID: currentStepID,\n        title: title,\n        noteCount: noteCount,\n        onNotes: onNotes,\n        soundFilePath: soundFilePath,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }));\n    } else {\n      const content = trackList.map((track, trackID) => {\n        let title = track.title,\n            onNotes = track.onNotes,\n            soundFile = track.soundFile;\n        const soundFilePath = soundFiles[soundFile];\n        return React.createElement(React.Fragment, null, React.createElement(Track, {\n          key: title,\n          trackID: +trackID,\n          currentStepID: currentStepID,\n          title: title,\n          noteCount: noteCount,\n          onNotes: onNotes,\n          soundFilePath: soundFilePath,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }));\n      });\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"track-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, content), React.createElement(\"button\", {\n      onClick: e => saveIt(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \" SAVE BEAT \"));\n  });\n};\n\nexport default memo(TrackList);","map":{"version":3,"sources":["/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/src/components/TrackList.js"],"names":["React","useContext","memo","Context","soundFiles","Track","context","TrackList","currentStepID","selected","fetched","sequence","trackList","noteCount","console","log","toSave","map","track","soundSave","name","soundFile","notes","onNotes","saveIt","e","newBeat","trackListInfo","fetch","method","headers","body","JSON","stringify","then","res","json","data","catch","error","gettin","content","trackID","title","soundFilePath"],"mappings":"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","sourcesContent":["import React, { useContext, memo } from 'react'\nimport { Context } from '../hooks/useStore'\nimport { soundFiles } from '../constants/config'\nimport Track from './Track'\nimport { context } from 'tone'\n\nconst TrackList = ({ currentStepID, selected, fetched }) => {\n    const { sequence: { trackList, noteCount } } = useContext(Context)\n\n\n    console.log('selected', selected)\n    const toSave = trackList.map(track => {\n\n        const soundSave = {\n            name: track.soundFile,\n            notes: track.onNotes\n        }\n        return soundSave\n    })\n    function saveIt(e) {\n\n\n\n        let newBeat = {\n            trackListInfo: [\n                {\n                    \"name\": toSave[0].name,\n                    \"notes\": toSave[0].notes\n                },\n                {\n                    \"name\": toSave[1].name,\n                    \"notes\": toSave[1].notes\n                },\n                {\n                    \"name\": toSave[2].name,\n                    \"notes\": toSave[3].notes\n                },\n                {\n                    \"name\": toSave[3].name,\n                    \"notes\": toSave[3].notes\n                }\n\n            ]\n        }\n\n        fetch('http://localhost:4000/beats', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newBeat),\n        })\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    }\n    // use an if statement to say that if selected > 0 onNotes is the array in the id'd array\n    const gettin = fetched[selected - 1]\n    const content = trackList.map((track, trackID) => {\n        let { title, onNotes, soundFile } = track\n        const soundFilePath = soundFiles[soundFile]\n    if (selected === 0) {\n\n            return (\n                <>\n\n                    <Track\n\n                        key={title}\n                        trackID={+trackID}\n                        currentStepID={currentStepID}\n                        title={title}\n                        noteCount={noteCount}\n                        onNotes={onNotes}\n                        soundFilePath={soundFilePath}\n                    />\n\n\n\n                </>\n            )\n        }\n     else {\n        const content = trackList.map((track, trackID) => {\n            let { title, onNotes, soundFile } = track\n            const soundFilePath = soundFiles[soundFile]\n            return (\n                <>\n\n                    <Track\n\n                        key={title}\n                        trackID={+trackID}\n                        currentStepID={currentStepID}\n                        title={title}\n                        noteCount={noteCount}\n                        onNotes={onNotes}\n                        soundFilePath={soundFilePath}\n                    />\n\n\n\n                </>\n            )\n\n\n        })\n    }\n\n\n    return (\n        <>\n\n\n            <div className=\"track-list\">\n                {content}\n\n            </div>\n            <button onClick={(e) => saveIt()} > SAVE BEAT </ button>\n\n        </>\n    )\n})\n}\n\nexport default memo(TrackList)\n\n"]},"metadata":{},"sourceType":"module"}