{"ast":null,"code":"import _slicedToArray from \"/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/src/components/TrackList.js\";\nimport React, { useContext, memo, useState } from 'react';\nimport { Context } from '../hooks/useStore';\nimport { soundFiles } from '../constants/config';\nimport Track from './Track';\nimport { context } from 'tone';\n\nconst TrackList = ({\n  currentStepID,\n  selected,\n  fetched\n}) => {\n  const _useContext = useContext(Context),\n        _useContext$sequence = _useContext.sequence,\n        trackList = _useContext$sequence.trackList,\n        noteCount = _useContext$sequence.noteCount;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        grab = _useState2[0],\n        setGrab = _useState2[1];\n\n  console.log('selected', selected);\n  const toSave = trackList.map(track => {\n    const soundSave = {\n      name: track.soundFile,\n      notes: track.onNotes\n    };\n    return soundSave;\n  });\n\n  function saveIt(e) {\n    let newBeat = {\n      trackListInfo: [{\n        \"name\": toSave[0].name,\n        \"notes\": toSave[0].notes\n      }, {\n        \"name\": toSave[1].name,\n        \"notes\": toSave[1].notes\n      }, {\n        \"name\": toSave[2].name,\n        \"notes\": toSave[3].notes\n      }, {\n        \"name\": toSave[3].name,\n        \"notes\": toSave[3].notes\n      }]\n    };\n    fetch('http://localhost:4000/beats', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newBeat)\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  } // use an if statement to say that if selected > 0 onNotes is the array in the id'd array\n\n\n  const gettin = fetched[selected - 1];\n  console.log('load', gettin.trackListInfo[0].notes);\n  let newKickNotes = gettin.trackListInfo[0].notes;\n  let content = trackList.map((track, trackID) => {\n    let title = track.title,\n        onNotes = track.onNotes,\n        soundFile = track.soundFile;\n    let soundFilePath = soundFiles[soundFile]; // {let kickNotes = content[0].props.children.props.onNotes\n    //     if (kickNotes != newKickNotes) {kickNotes = newKickNotes}\n    // }\n\n    return React.createElement(React.Fragment, null, React.createElement(Track, {\n      key: title,\n      trackID: +trackID,\n      currentStepID: currentStepID,\n      title: title,\n      noteCount: noteCount,\n      onNotes: onNotes,\n      soundFilePath: soundFilePath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }));\n  }); // {function swapBeat (e) {\n  //     let kickNotes = content[0].props.children.props.onNotes\n  //     const newKickNotes = gettin.trackListInfo[0].notes\n  //     kickNotes = newKickNotes\n  //         console.log('kicknotes', kickNotes)}\n  //     }\n\n  return React.createElement(React.Fragment, null, console.log('runningKick', content[0].props.children.props.onNotes), React.createElement(\"div\", {\n    className: \"track-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, content), React.createElement(\"button\", {\n    onClick: e => saveIt(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \" SAVE BEAT \"));\n};\n\nexport default memo(TrackList);","map":{"version":3,"sources":["/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/src/components/TrackList.js"],"names":["React","useContext","memo","useState","Context","soundFiles","Track","context","TrackList","currentStepID","selected","fetched","sequence","trackList","noteCount","grab","setGrab","console","log","toSave","map","track","soundSave","name","soundFile","notes","onNotes","saveIt","e","newBeat","trackListInfo","fetch","method","headers","body","JSON","stringify","then","res","json","data","catch","error","gettin","newKickNotes","content","trackID","title","soundFilePath","props","children"],"mappings":"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","sourcesContent":["import React, { useContext, memo, useState } from 'react'\nimport { Context } from '../hooks/useStore'\nimport { soundFiles } from '../constants/config'\nimport Track from './Track'\nimport { context } from 'tone'\n\nconst TrackList = ({ currentStepID, selected, fetched }) => {\n    const { sequence: { trackList, noteCount } } = useContext(Context)\n  \n\n    const [grab, setGrab] = useState ([])\n\n    console.log('selected', selected)\n    const toSave = trackList.map( track => {\n        \n        const soundSave = {\n            name : track.soundFile,\n            notes: track.onNotes\n        } \n    return    soundSave\n    })\n    function saveIt (e) {\n          \n             \n\n        let newBeat ={ \n        trackListInfo : [\n            {\n                \"name\": toSave[0].name,\n                \"notes\": toSave[0].notes\n            },\n            {\n                \"name\": toSave[1].name,\n                \"notes\": toSave[1].notes\n            },\n            {\n                \"name\": toSave[2].name,\n                \"notes\": toSave[3].notes\n            },\n            {\n                \"name\": toSave[3].name,\n                \"notes\": toSave[3].notes\n            }\n           \n        ]  }\n\n        fetch('http://localhost:4000/beats', {\n            method: 'POST', \n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newBeat),\n          })\n          .then(res => res.json())\n          .then(data => {\n            console.log(data);\n          })\n          .catch((error) => {\n            console.error('Error:', error);\n          });\n    }\n// use an if statement to say that if selected > 0 onNotes is the array in the id'd array\n       const gettin = fetched[selected-1]\n      \n       console.log('load', gettin.trackListInfo[0].notes)\n      \n    let newKickNotes = gettin.trackListInfo[0].notes\n    let content = trackList.map((track, trackID) => {\n        let { title, onNotes, soundFile } = track\n        let soundFilePath = soundFiles[soundFile]\n      \n        // {let kickNotes = content[0].props.children.props.onNotes\n        //     if (kickNotes != newKickNotes) {kickNotes = newKickNotes}\n        // }\n\n        return (\n         <> \n         \n            <Track\n            \n               \n                key={title}\n                trackID={+trackID}\n                currentStepID={currentStepID}\n                title={title}\n                noteCount={noteCount}\n                onNotes={onNotes}\n                soundFilePath={soundFilePath}\n            />\n            </>\n        )\n    })\n    \n    // {function swapBeat (e) {\n        \n    //     let kickNotes = content[0].props.children.props.onNotes\n    //     const newKickNotes = gettin.trackListInfo[0].notes\n    //     kickNotes = newKickNotes\n    //         console.log('kicknotes', kickNotes)}\n    //     }\n        \n    return (\n        <>\n        \n        {console.log('runningKick', content[0].props.children.props.onNotes)}\n\n        <div className=\"track-list\">\n        \n            {content}\n        </div>\n        <button onClick={(e) => saveIt()} > SAVE BEAT </ button>\n        {/* <button onClick={(e) => swapBeat()} >Load Beat </button> */}\n        \n        </>\n    )\n}\n\nexport default memo(TrackList)\n\n"]},"metadata":{},"sourceType":"module"}