{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\n\nexport class Convolver extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"Convolver\";\n    /**\n     * The native ConvolverNode\n     */\n\n    this._convolver = this.context.createConvolver();\n    const options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n    this._buffer = new ToneAudioBuffer(options.url, buffer => {\n      this.buffer = buffer;\n      options.onload();\n    });\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    }); // set if it's already loaded, set it immediately\n\n    if (this._buffer.loaded) {\n      this.buffer = this._buffer;\n    } // initially set normalization\n\n\n    this.normalize = options.normalize; // connect it up\n\n    this.input.chain(this._convolver, this.output);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      normalize: true,\n      onload: noOp\n    });\n  }\n  /**\n   * Load an impulse response url as an audio buffer.\n   * Decodes the audio asynchronously and invokes\n   * the callback once the audio buffer loads.\n   * @param url The url of the buffer to load. filetype support depends on the browser.\n   */\n\n\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.buffer = yield this._buffer.load(url);\n    });\n  }\n  /**\n   * The convolver's buffer\n   */\n\n\n  get buffer() {\n    if (this._buffer.length) {\n      return this._buffer;\n    } else {\n      return null;\n    }\n  }\n\n  set buffer(buffer) {\n    if (buffer) {\n      this._buffer.set(buffer);\n    } // if it's already got a buffer, create a new one\n\n\n    if (this._convolver.buffer) {\n      // disconnect the old one\n      this.input.disconnect();\n\n      this._convolver.disconnect(); // create and connect a new one\n\n\n      this._convolver = this.context.createConvolver();\n      this.input.chain(this._convolver, this.output);\n    }\n\n    const buff = this._buffer.get();\n\n    this._convolver.buffer = buff ? buff : null;\n  }\n  /**\n   * The normalize property of the ConvolverNode interface is a boolean that\n   * controls whether the impulse response from the buffer will be scaled by\n   * an equal-power normalization when the buffer attribute is set, or not.\n   */\n\n\n  get normalize() {\n    return this._convolver.normalize;\n  }\n\n  set normalize(norm) {\n    this._convolver.normalize = norm;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._buffer.dispose();\n\n    this._convolver.disconnect();\n\n    return this;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}