{"ast":null,"code":"import _objectSpread from \"/home/webster/Development/code/Mod2/react-beats/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/webster/Development/code/Mod2/react-beats/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/webster/Development/code/Mod2/react-beats/src/components/Instrument.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport isAccidentalNote from \"./utils/isAccidentalNote\";\nimport { getKeyboardShortcutsForNote } from \"./utils/getKeyboardShortcutsForNote\";\nimport InstrumentAudio from \"./InstrumentAudio\";\nimport getNotesBetween from \"./getNotesBetween\";\n\nconst isRegularKey = event => {\n  return !event.ctrlKey && !event.metaKey && !event.shiftKey;\n};\n\nconst Instrument = ({\n  instrumentName,\n  startNote,\n  endNote,\n  renderPianoKey,\n  keyboardMap\n}) => {\n  const notes = getNotesBetween(startNote, endNote);\n\n  const _useState = useState({\n    notesPlaying: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n  }, []);\n\n  const getNoteFromKeyboardKey = keyboardKey => {\n    return keyboardMap[keyboardKey.toUpperCase()];\n  };\n\n  const handleKeyDown = e => {\n    if (isRegularKey(e) && !e.repeat) {\n      const note = getNoteFromKeyboardKey(e.key);\n\n      if (note) {\n        setState(_objectSpread({}, state, {\n          notesPlaying: [...state.notesPlaying, note]\n        }));\n      }\n    }\n  };\n\n  const handleKeyUp = e => {\n    if (isRegularKey(e) && !e.repeat) {\n      const note = getNoteFromKeyboardKey(e.key);\n\n      if (note) {\n        setState(_objectSpread({}, state, {\n          notesPlaying: state.notesPlaying.filter(notePlaying => notePlaying !== note)\n        }));\n      }\n    }\n  };\n\n  const onPlayNoteStart = note => {\n    setState(_objectSpread({}, state, {\n      notesPlaying: [...state.notesPlaying, note]\n    }));\n  };\n\n  const onPlayNoteEnd = note => {\n    setState(_objectSpread({}, state, {\n      notesPlaying: state.notesPlaying.filter(notePlaying => notePlaying !== note)\n    }));\n  }; //rendering piano keys\n\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, notes.map(note => {\n    return React.createElement(Fragment, {\n      key: note,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, renderPianoKey({\n      note,\n      isAccidentalNote: isAccidentalNote(note),\n      isNotePlaying: state.notesPlaying.includes(note),\n      startPlayingNote: () => onPlayNoteStart(note),\n      stopPlayingNote: () => onPlayNoteEnd(note),\n      keyboardShortcut: getKeyboardShortcutsForNote(keyboardMap, note)\n    }));\n  }), React.createElement(InstrumentAudio, {\n    instrumentName: instrumentName,\n    notes: state.notesPlaying,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }));\n};\n\nexport default Instrument;","map":{"version":3,"sources":["/home/webster/Development/code/Mod2/react-beats/src/components/Instrument.js"],"names":["React","Fragment","useState","useEffect","isAccidentalNote","getKeyboardShortcutsForNote","InstrumentAudio","getNotesBetween","isRegularKey","event","ctrlKey","metaKey","shiftKey","Instrument","instrumentName","startNote","endNote","renderPianoKey","keyboardMap","notes","notesPlaying","state","setState","window","addEventListener","handleKeyDown","handleKeyUp","getNoteFromKeyboardKey","keyboardKey","toUpperCase","e","repeat","note","key","filter","notePlaying","onPlayNoteStart","onPlayNoteEnd","map","isNotePlaying","includes","startPlayingNote","stopPlayingNote","keyboardShortcut"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport isAccidentalNote from \"./utils/isAccidentalNote\";\nimport { getKeyboardShortcutsForNote } from \"./utils/getKeyboardShortcutsForNote\";\nimport InstrumentAudio from \"./InstrumentAudio\";\nimport getNotesBetween from \"./getNotesBetween\";\n\nconst isRegularKey = event => {\n  return !event.ctrlKey && !event.metaKey && !event.shiftKey;\n};\nconst Instrument = ({\n  instrumentName,\n  startNote,\n  endNote,\n  renderPianoKey,\n  keyboardMap\n}) => {\n  const notes = getNotesBetween(startNote, endNote);\n\n  const [state, setState] = useState({\n    notesPlaying: []\n  });\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n  }, []);\n\n  const getNoteFromKeyboardKey = keyboardKey => {\n    return keyboardMap[keyboardKey.toUpperCase()];\n  };\n\n  const handleKeyDown = e => {\n    if (isRegularKey(e) && !e.repeat) {\n      const note = getNoteFromKeyboardKey(e.key);\n      if (note) {\n        setState({ ...state, notesPlaying: [...state.notesPlaying, note] });\n      }\n    }\n  };\n\n  const handleKeyUp = e => {\n    if (isRegularKey(e) && !e.repeat) {\n      const note = getNoteFromKeyboardKey(e.key);\n      if (note) {\n        setState({\n          ...state,\n          notesPlaying: state.notesPlaying.filter(\n            notePlaying => notePlaying !== note\n          )\n        });\n      }\n    }\n  };\n\n  const onPlayNoteStart = note => {\n    setState({ ...state, notesPlaying: [...state.notesPlaying, note] });\n  };\n\n  const onPlayNoteEnd = note => {\n    setState({\n      ...state,\n      notesPlaying: state.notesPlaying.filter(\n        notePlaying => notePlaying !== note\n      )\n    });\n  };\n\n  //rendering piano keys\n  return (\n    <Fragment>\n      {notes.map(note => {\n        return (\n          <Fragment key={note}>\n            {renderPianoKey({\n              note,\n              isAccidentalNote: isAccidentalNote(note),\n              isNotePlaying: state.notesPlaying.includes(note),\n              startPlayingNote: () => onPlayNoteStart(note),\n              stopPlayingNote: () => onPlayNoteEnd(note),\n              keyboardShortcut: getKeyboardShortcutsForNote(keyboardMap, note)\n            })}\n          </Fragment>\n        );\n      })}\n\n      <InstrumentAudio\n        instrumentName={instrumentName}\n        notes={state.notesPlaying}\n      />\n    </Fragment>\n  );\n};\n\nexport default Instrument;"]},"metadata":{},"sourceType":"module"}