{"ast":null,"code":"import _slicedToArray from \"/home/webster/Development/code/Mod2/react-beats/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/webster/Development/code/Mod2/react-beats/src/components/TrackList.js\";\nimport React, { useContext, memo, useState } from 'react';\nimport { Context } from '../hooks/useStore';\nimport { soundFiles } from '../constants/config';\nimport Track from './Track';\nimport { context } from 'tone';\n\nconst TrackList = ({\n  currentStepID,\n  selected,\n  fetched\n}) => {\n  const _useContext = useContext(Context),\n        _useContext$sequence = _useContext.sequence,\n        trackList = _useContext$sequence.trackList,\n        noteCount = _useContext$sequence.noteCount;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        notes = _useState2[0],\n        setNotes = _useState2[1];\n\n  console.log('selected', selected);\n  const toSave = trackList.map(track => {\n    const soundSave = {\n      name: track.soundFile,\n      notes: track.onNotes\n    };\n    return soundSave;\n  });\n\n  function saveIt(e) {\n    let newBeat = {\n      trackListInfo: [{\n        \"name\": toSave[0].name,\n        \"notes\": toSave[0].notes\n      }, {\n        \"name\": toSave[1].name,\n        \"notes\": toSave[1].notes\n      }, {\n        \"name\": toSave[2].name,\n        \"notes\": toSave[3].notes\n      }, {\n        \"name\": toSave[3].name,\n        \"notes\": toSave[3].notes\n      }]\n    };\n    fetch('http://localhost:4000/beats', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newBeat)\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  } // use an if statement to say that if selected > 0 onNotes is the array in the id'd array\n\n\n  const gettin = fetched[selected];\n  let loadedNotes = gettin.trackListInfo;\n  let loadKicks = gettin.trackListInfo[0].notes;\n  let loadSnares = gettin.trackListInfo[1].notes;\n  let loadHho = gettin.trackListInfo[2].notes;\n  let loadHhc = gettin.trackListInfo[3].notes;\n  console.log('tracklist', trackList[0].onNotes);\n  trackList[0].onNotes = loadKicks;\n  trackList[1].onNotes = loadSnares;\n  trackList[2].onNotes = loadHho;\n  trackList[3].onNotes = loadHhc;\n  let content = trackList.map((track, trackID) => {\n    let key = trackID;\n    let title = track.title,\n        onNotes = track.onNotes,\n        soundFile = track.soundFile,\n        id = track.id;\n    let soundFilePath = soundFiles[soundFile];\n    console.log(\"loadedKicks\", loadKicks);\n    console.log('loaded', loadedNotes);\n    console.log('id', trackID); ///useEffect\n\n    return React.createElement(React.Fragment, null, React.createElement(Track, {\n      id: id,\n      key: title,\n      trackID: +trackID,\n      currentStepID: currentStepID,\n      title: title,\n      noteCount: noteCount,\n      onNotes: onNotes,\n      soundFilePath: soundFilePath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"track-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, content), React.createElement(\"button\", {\n    onClick: e => saveIt(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \" SAVE BEAT \"), React.createElement(\"button\", {\n    onClick: e => console.log('fuck'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \" LOAD BEAT \"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Beat1 is the reset!\"));\n};\n\nexport default memo(TrackList);","map":{"version":3,"sources":["/home/webster/Development/code/Mod2/react-beats/src/components/TrackList.js"],"names":["React","useContext","memo","useState","Context","soundFiles","Track","context","TrackList","currentStepID","selected","fetched","sequence","trackList","noteCount","notes","setNotes","console","log","toSave","map","track","soundSave","name","soundFile","onNotes","saveIt","e","newBeat","trackListInfo","fetch","method","headers","body","JSON","stringify","then","res","json","data","catch","error","gettin","loadedNotes","loadKicks","loadSnares","loadHho","loadHhc","content","trackID","key","title","id","soundFilePath"],"mappings":"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","sourcesContent":["import React, { useContext, memo, useState } from 'react'\nimport { Context } from '../hooks/useStore'\nimport { soundFiles } from '../constants/config'\nimport Track from './Track'\nimport { context } from 'tone'\n\nconst TrackList = ({ currentStepID, selected, fetched }) => {\n    const { sequence: { trackList, noteCount } } = useContext(Context)\n\n\n    const [notes, setNotes] = useState([])\n\n    console.log('selected', selected)\n    const toSave = trackList.map(track => {\n\n        const soundSave = {\n            name: track.soundFile,\n            notes: track.onNotes\n        }\n        return soundSave\n    })\n    function saveIt(e) {\n\n\n\n        let newBeat = {\n            trackListInfo: [\n                {\n                    \"name\": toSave[0].name,\n                    \"notes\": toSave[0].notes\n                },\n                {\n                    \"name\": toSave[1].name,\n                    \"notes\": toSave[1].notes\n                },\n                {\n                    \"name\": toSave[2].name,\n                    \"notes\": toSave[3].notes\n                },\n                {\n                    \"name\": toSave[3].name,\n                    \"notes\": toSave[3].notes\n                }\n\n            ]\n        }\n\n        fetch('http://localhost:4000/beats', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newBeat),\n        })\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n            })\n            .catch((error) => {\n                console.error('Error:', error);\n            });\n    }\n    // use an if statement to say that if selected > 0 onNotes is the array in the id'd array\n    const gettin = fetched[selected]\n\n    let loadedNotes = gettin.trackListInfo\n    let loadKicks = gettin.trackListInfo[0].notes\n    let loadSnares = gettin.trackListInfo[1].notes\n    let loadHho = gettin.trackListInfo[2].notes\n    let loadHhc = gettin.trackListInfo[3].notes\n\n\n    console.log('tracklist', trackList[0].onNotes)\n    trackList[0].onNotes = loadKicks\n    trackList[1].onNotes = loadSnares\n    trackList[2].onNotes = loadHho\n    trackList[3].onNotes = loadHhc\n\n    let content = trackList.map((track, trackID) => {\n        let key = trackID\n        let { title, onNotes, soundFile, id } = track\n\n        let soundFilePath = soundFiles[soundFile]\n\n        console.log(\"loadedKicks\", loadKicks)\n        console.log('loaded', loadedNotes)\n        console.log('id', trackID)\n\n        ///useEffect\n\n\n        return (\n            <>\n\n                <Track\n\n                    id={id}\n                    key={title}\n                    trackID={+trackID}\n                    currentStepID={currentStepID}\n                    title={title}\n                    noteCount={noteCount}\n                    onNotes={onNotes}\n                    soundFilePath={soundFilePath}\n                />\n            </>\n        )\n    })\n\n    return (\n        <>\n\n\n            <div className=\"track-list\">\n\n                {content}\n            </div>\n            <button onClick={(e) => saveIt()} > SAVE BEAT </ button>\n            <button onClick={(e) => console.log('fuck')} > LOAD BEAT </ button>\n            <p>Beat1 is the reset!</p>\n        </>\n    )\n}\n\nexport default memo(TrackList)"]},"metadata":{},"sourceType":"module"}