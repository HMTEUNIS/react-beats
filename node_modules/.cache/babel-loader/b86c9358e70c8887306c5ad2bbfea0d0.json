{"ast":null,"code":"import _slicedToArray from \"/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/src/components/TrackList.js\";\nimport React, { useContext, memo, useState } from 'react';\nimport { Context } from '../hooks/useStore';\nimport { soundFiles } from '../constants/config';\nimport Track from './Track';\nimport { context } from 'tone';\n\nconst TrackList = ({\n  currentStepID,\n  selected,\n  fetched\n}) => {\n  const _useContext = useContext(Context),\n        _useContext$sequence = _useContext.sequence,\n        trackList = _useContext$sequence.trackList,\n        noteCount = _useContext$sequence.noteCount;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        notes = _useState2[0],\n        setNotes = _useState2[1];\n\n  console.log('selected', selected);\n  const toSave = trackList.map(track => {\n    const soundSave = {\n      name: track.soundFile,\n      notes: track.onNotes\n    };\n    return soundSave;\n  });\n\n  function saveIt(e) {\n    let newBeat = {\n      trackListInfo: [{\n        \"name\": toSave[0].name,\n        \"notes\": toSave[0].notes\n      }, {\n        \"name\": toSave[1].name,\n        \"notes\": toSave[1].notes\n      }, {\n        \"name\": toSave[2].name,\n        \"notes\": toSave[3].notes\n      }, {\n        \"name\": toSave[3].name,\n        \"notes\": toSave[3].notes\n      }]\n    };\n    fetch('http://localhost:4000/beats', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newBeat)\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  } // use an if statement to say that if selected > 0 onNotes is the array in the id'd array\n\n\n  const gettin = fetched[selected - 1];\n  let newKickNotes = gettin;\n  let content = trackList.map((track, trackID) => {\n    let key = trackID;\n    let title = track.title,\n        onNotes = track.onNotes,\n        soundFile = track.soundFile,\n        id = track.id;\n    let soundFilePath = soundFiles[soundFile];\n    let runningNotes = track.onNotes;\n    let loadedNotes = gettin.trackListInfo;\n    let loadKicks = gettin.trackListInfo[0].notes;\n    let loadSnares = gettin.trackListInfo[1].notes;\n    let loadHho = gettin.trackListInfo[2].notes;\n    let loadHhc = gettin.trackListInfo[3].notes;\n    console.log('runningNotes', runningNotes);\n    console.log('kick', runningNotes);\n    console.log('id', trackID);\n\n    if (runningNotes != loadedNotes) {\n      loadedNotes = runningNotes;\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(Track, {\n      id: id,\n      key: title,\n      trackID: +trackID,\n      currentStepID: currentStepID,\n      title: title,\n      noteCount: noteCount,\n      onNotes: onNotes,\n      soundFilePath: soundFilePath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"track-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, content), React.createElement(\"button\", {\n    onClick: e => saveIt(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \" SAVE BEAT \"), React.createElement(\"button\", {\n    onClick: e => console.log('fuck'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \" SAVE BEAT \"));\n};\n\nexport default memo(TrackList);","map":{"version":3,"sources":["/home/hmteunis/Development/Code/Mod2/808/simpler/Test/react-beats/src/components/TrackList.js"],"names":["React","useContext","memo","useState","Context","soundFiles","Track","context","TrackList","currentStepID","selected","fetched","sequence","trackList","noteCount","notes","setNotes","console","log","toSave","map","track","soundSave","name","soundFile","onNotes","saveIt","e","newBeat","trackListInfo","fetch","method","headers","body","JSON","stringify","then","res","json","data","catch","error","gettin","newKickNotes","content","trackID","key","title","id","soundFilePath","runningNotes","loadedNotes","loadKicks","loadSnares","loadHho","loadHhc"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,EAAkCC,QAAlC,QAAkD,OAAlD;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,OAAT,QAAwB,MAAxB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA;AAA3B,CAAD,KAA0C;AAAA,sBACTV,UAAU,CAACG,OAAD,CADD;AAAA,2CAChDQ,QADgD;AAAA,QACpCC,SADoC,wBACpCA,SADoC;AAAA,QACzBC,SADyB,wBACzBA,SADyB;;AAAA,oBAI9BX,QAAQ,CAAE,EAAF,CAJsB;AAAA;AAAA,QAIjDY,KAJiD;AAAA,QAI1CC,QAJ0C;;AAMxDC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBR,QAAxB;AACA,QAAMS,MAAM,GAAGN,SAAS,CAACO,GAAV,CAAeC,KAAK,IAAI;AAEnC,UAAMC,SAAS,GAAG;AACdC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SADC;AAEdT,MAAAA,KAAK,EAAEM,KAAK,CAACI;AAFC,KAAlB;AAIJ,WAAUH,SAAV;AACC,GAPc,CAAf;;AAQA,WAASI,MAAT,CAAiBC,CAAjB,EAAoB;AAIhB,QAAIC,OAAO,GAAE;AACbC,MAAAA,aAAa,EAAG,CACZ;AACI,gBAAQV,MAAM,CAAC,CAAD,CAAN,CAAUI,IADtB;AAEI,iBAASJ,MAAM,CAAC,CAAD,CAAN,CAAUJ;AAFvB,OADY,EAKZ;AACI,gBAAQI,MAAM,CAAC,CAAD,CAAN,CAAUI,IADtB;AAEI,iBAASJ,MAAM,CAAC,CAAD,CAAN,CAAUJ;AAFvB,OALY,EASZ;AACI,gBAAQI,MAAM,CAAC,CAAD,CAAN,CAAUI,IADtB;AAEI,iBAASJ,MAAM,CAAC,CAAD,CAAN,CAAUJ;AAFvB,OATY,EAaZ;AACI,gBAAQI,MAAM,CAAC,CAAD,CAAN,CAAUI,IADtB;AAEI,iBAASJ,MAAM,CAAC,CAAD,CAAN,CAAUJ;AAFvB,OAbY;AADH,KAAb;AAqBAe,IAAAA,KAAK,CAAC,6BAAD,EAAgC;AACjCC,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFwB;AAKjCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,OAAf;AAL2B,KAAhC,CAAL,CAOGQ,IAPH,CAOQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPf,EAQGF,IARH,CAQQG,IAAI,IAAI;AACZtB,MAAAA,OAAO,CAACC,GAAR,CAAYqB,IAAZ;AACD,KAVH,EAWGC,KAXH,CAWUC,KAAD,IAAW;AAChBxB,MAAAA,OAAO,CAACwB,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACD,KAbH;AAcH,GAtDuD,CAuD5D;;;AACO,QAAMC,MAAM,GAAG/B,OAAO,CAACD,QAAQ,GAAC,CAAV,CAAtB;AAGH,MAAIiC,YAAY,GAAGD,MAAnB;AACA,MAAIE,OAAO,GAAG/B,SAAS,CAACO,GAAV,CAAc,CAACC,KAAD,EAAQwB,OAAR,KAAoB;AAC5C,QAAIC,GAAG,GAAGD,OAAV;AAD4C,QAEtCE,KAFsC,GAEJ1B,KAFI,CAEtC0B,KAFsC;AAAA,QAE/BtB,OAF+B,GAEJJ,KAFI,CAE/BI,OAF+B;AAAA,QAEtBD,SAFsB,GAEJH,KAFI,CAEtBG,SAFsB;AAAA,QAEXwB,EAFW,GAEJ3B,KAFI,CAEX2B,EAFW;AAI5C,QAAIC,aAAa,GAAG5C,UAAU,CAACmB,SAAD,CAA9B;AACF,QAAI0B,YAAY,GAAG7B,KAAK,CAACI,OAAzB;AACA,QAAI0B,WAAW,GAAGT,MAAM,CAACb,aAAzB;AACA,QAAIuB,SAAS,GAAGV,MAAM,CAACb,aAAP,CAAqB,CAArB,EAAwBd,KAAxC;AACA,QAAIsC,UAAU,GAAGX,MAAM,CAACb,aAAP,CAAqB,CAArB,EAAwBd,KAAzC;AACA,QAAIuC,OAAO,GAAGZ,MAAM,CAACb,aAAP,CAAqB,CAArB,EAAwBd,KAAtC;AACA,QAAIwC,OAAO,GAAGb,MAAM,CAACb,aAAP,CAAqB,CAArB,EAAwBd,KAAtC;AAEAE,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BgC,YAA5B;AACAjC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBgC,YAApB;AACAjC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkB2B,OAAlB;;AACC,QAAIK,YAAY,IAAIC,WAApB,EAAgC;AAAEA,MAAAA,WAAW,GAAGD,YAAd;AAA4B;;AAI7D,WACC,0CAEG,oBAAC,KAAD;AAEI,MAAA,EAAE,EAAIF,EAFV;AAGI,MAAA,GAAG,EAAED,KAHT;AAII,MAAA,OAAO,EAAE,CAACF,OAJd;AAKI,MAAA,aAAa,EAAEpC,aALnB;AAMI,MAAA,KAAK,EAAEsC,KANX;AAOI,MAAA,SAAS,EAAEjC,SAPf;AAQI,MAAA,OAAO,EAAEW,OARb;AASI,MAAA,aAAa,EAAEwB,aATnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFH,CADD;AAgBH,GAnCa,CAAd;AAqCA,SACI,0CAGA;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKL,OAFL,CAHA,EAOA;AAAQ,IAAA,OAAO,EAAGjB,CAAD,IAAOD,MAAM,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAPA,EAQA;AAAQ,IAAA,OAAO,EAAGC,CAAD,IAAOV,OAAO,CAACC,GAAR,CAAY,MAAZ,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBARA,CADJ;AAYH,CA7GD;;AA+GA,eAAehB,IAAI,CAACM,SAAD,CAAnB","sourcesContent":["import React, { useContext, memo, useState } from 'react'\nimport { Context } from '../hooks/useStore'\nimport { soundFiles } from '../constants/config'\nimport Track from './Track'\nimport { context } from 'tone'\n\nconst TrackList = ({ currentStepID, selected, fetched }) => {\n    const { sequence: { trackList, noteCount } } = useContext(Context)\n  \n\n    const [notes, setNotes] = useState ([])\n\n    console.log('selected', selected)\n    const toSave = trackList.map( track => {\n        \n        const soundSave = {\n            name : track.soundFile,\n            notes: track.onNotes\n        } \n    return    soundSave\n    })\n    function saveIt (e) {\n          \n             \n\n        let newBeat ={ \n        trackListInfo : [\n            {\n                \"name\": toSave[0].name,\n                \"notes\": toSave[0].notes\n            },\n            {\n                \"name\": toSave[1].name,\n                \"notes\": toSave[1].notes\n            },\n            {\n                \"name\": toSave[2].name,\n                \"notes\": toSave[3].notes\n            },\n            {\n                \"name\": toSave[3].name,\n                \"notes\": toSave[3].notes\n            }\n           \n        ]  }\n\n        fetch('http://localhost:4000/beats', {\n            method: 'POST', \n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newBeat),\n          })\n          .then(res => res.json())\n          .then(data => {\n            console.log(data);\n          })\n          .catch((error) => {\n            console.error('Error:', error);\n          });\n    }\n// use an if statement to say that if selected > 0 onNotes is the array in the id'd array\n       const gettin = fetched[selected-1]\n      \n      \n    let newKickNotes = gettin\n    let content = trackList.map((track, trackID) => {\n        let key = trackID\n        let { title, onNotes, soundFile, id } = track\n\n        let soundFilePath = soundFiles[soundFile]\n      let runningNotes = track.onNotes\n      let loadedNotes = gettin.trackListInfo\n      let loadKicks = gettin.trackListInfo[0].notes\n      let loadSnares = gettin.trackListInfo[1].notes\n      let loadHho = gettin.trackListInfo[2].notes\n      let loadHhc = gettin.trackListInfo[3].notes\n\n      console.log('runningNotes', runningNotes)\n      console.log('kick', runningNotes)\n      console.log('id', trackID)\n       if (runningNotes != loadedNotes){ loadedNotes = runningNotes }\n\n       \n\n        return (\n         <> \n         \n            <Track\n            \n                id = {id}\n                key={title}\n                trackID={+trackID}\n                currentStepID={currentStepID}\n                title={title}\n                noteCount={noteCount}\n                onNotes={onNotes}\n                soundFilePath={soundFilePath}\n            />\n            </>\n        )\n    })\n    \n    return (\n        <>\n        \n\n        <div className=\"track-list\">\n        \n            {content}\n        </div>\n        <button onClick={(e) => saveIt()} > SAVE BEAT </ button>\n        <button onClick={(e) => console.log('fuck')} > SAVE BEAT </ button>\n        </>\n    )\n}\n\nexport default memo(TrackList)\n\n"]},"metadata":{},"sourceType":"module"}